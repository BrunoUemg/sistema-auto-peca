/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import DAO.ProdutoDAO;
import DAO.VendaDAO;
import DAO.Session;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.Element;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.ItensVenda;
import model.Produto;
import model.Venda;

/**
 *
 * @author serpa
 */
public class FaturamentoView extends javax.swing.JInternalFrame {

    Produto produto;
    ProdutoDAO produtoDAO;
    Document doc;
    VendaDAO vendaDAO;
    Venda venda;
    ItensVenda itensVenda;
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    String idVenda;

    /**
     * Creates new form ClienteView
     */
    public FaturamentoView() throws ParseException {
        vendaDAO = new VendaDAO();
        itensVenda = new ItensVenda();
        initComponents();
        this.setVisible(true);
        Session session = Session.getInstance();
        try {
            readVendasAll();
        } catch (SQLException ex) {
            Logger.getLogger(FaturamentoView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void readVendasAll() throws SQLException {
        DefaultTableModel modelF = (DefaultTableModel) tbVendas.getModel();
        modelF.setNumRows(0);
        double totalVendas = 0;
        for (Venda v : vendaDAO.readVendasAll()) {
            totalVendas += v.getValorTotal();
            modelF.addRow(new Object[]{
                v.getIdVenda(),
                v.getDataVenda(),
                v.getValorTotal(),});

        }
        lbTotal.setText("Total Vendas Periodo:" + totalVendas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        dataInicial = new javax.swing.JFormattedTextField();
        dataFinal = new javax.swing.JFormattedTextField();
        btnBuscarPeriodo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbVendas = new javax.swing.JTable();
        lbTotal = new javax.swing.JLabel();
        btnRelatorio = new javax.swing.JButton();

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setClosable(true);
        setTitle("Relatórios Venda");
        setVisible(true);

        jLabel1.setText("Periodo de Vendas");

        try {
            dataInicial.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            dataFinal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btnBuscarPeriodo.setText("Buscar Periodo de Vendas");
        btnBuscarPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPeriodoActionPerformed(evt);
            }
        });

        tbVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Data", "Valor da Venda"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbVendasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbVendas);

        lbTotal.setText("Total Vendas Periodo:");

        btnRelatorio.setText("Gerar Relatório");
        btnRelatorio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRelatorioActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(btnRelatorio, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(btnBuscarPeriodo)))
                .addContainerGap(628, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lbTotal)
                .addGap(156, 156, 156))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRelatorio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBuscarPeriodo)
                .addGap(14, 14, 14)
                .addComponent(lbTotal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tbVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbVendasMouseClicked
    }//GEN-LAST:event_tbVendasMouseClicked

    private void btnBuscarPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPeriodoActionPerformed
        try {
            SimpleDateFormat br = new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat dt = new SimpleDateFormat("yyyy-MM-dd");
            Date datei = br.parse(dataInicial.getText());
            Date datef = br.parse(dataFinal.getText());
            String dataI = dt.format(datei);
            String dataF = dt.format(datef);
            try {
                readVendasData(dataI, dataF);
            } catch (SQLException ex) {
                Logger.getLogger(FaturamentoView.class.getName()).log(Level.SEVERE, null, ex);
                try {
                    readVendasAll();
                } catch (SQLException ex1) {
                    Logger.getLogger(FaturamentoView.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(FaturamentoView.class.getName()).log(Level.SEVERE, null, ex);
            try {
                readVendasAll();
            } catch (SQLException ex1) {
                Logger.getLogger(FaturamentoView.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }//GEN-LAST:event_btnBuscarPeriodoActionPerformed

    private void btnRelatorioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRelatorioActionPerformed
        String nomeDiretorio = null;
        String nomePasta = "SRS";
        String separador = java.io.File.separator;
        try {
            nomeDiretorio = "C:" + separador + nomePasta;
            if (!new File(nomeDiretorio).exists()) {
                (new File(nomeDiretorio)).mkdir();
            }
            gerarRelatorioFaturamento();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnRelatorioActionPerformed

    public void readVendasData(String i, String f) throws SQLException {
        DefaultTableModel modelF = (DefaultTableModel) tbVendas.getModel();
        modelF.setNumRows(0);
        double totalVendas = 0;
        for (Venda v : vendaDAO.readVendasData(i, f)) {
            totalVendas += v.getValorTotal();
            modelF.addRow(new Object[]{
                v.getIdVenda(),
                v.getDataVenda(),
                v.getValorTotal(),});

        }
        lbTotal.setText("Total Vendas Periodo:" + totalVendas);
    }

    public void gerarRelatorioFaturamento() throws ParseException {
        SimpleDateFormat br = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat dt = new SimpleDateFormat("yyyy-MM-dd");
        Date datei = br.parse(dataInicial.getText());
        Date datef = br.parse(dataFinal.getText());
        String dataI = dt.format(datei);
        String dataF = dt.format(datef);
        double totalCompra = 0;
        try {
            List<Venda> lista = new ArrayList<>();
            lista = vendaDAO.readVendasData(dataI, dataF);
            doc = new Document(PageSize.A4, 41.5f, 41.5f, 55.2f, 55.2f);
            PdfWriter.getInstance(doc, new FileOutputStream("C:/SRS/Faturamento" + ".pdf"));
            doc.open();

            Font f1 = new Font(Font.HELVETICA, 14, Font.BOLD);
            Font f2 = new Font(Font.HELVETICA, 12, Font.BOLD);
            Font f3 = new Font(Font.HELVETICA, 12, Font.NORMAL);
            Font f4 = new Font(Font.HELVETICA, 10, Font.BOLD);
            Font f5 = new Font(Font.HELVETICA, 10, Font.NORMAL);

            Paragraph titulo1 = new Paragraph("Faturamento Auto Peças", f2);
            titulo1.setAlignment(Element.ALIGN_CENTER);
            titulo1.setSpacingAfter(10);

            Paragraph titulo2 = new Paragraph("Relátorio de Faturamento do Periodo" + dataInicial.getText() + "-" + dataFinal.getText(), f1);
            titulo2.setAlignment(Element.ALIGN_CENTER);
            titulo2.setSpacingAfter(10);
            PdfPTable tabela = new PdfPTable(new float[]{0.40f, 0.40f, 0.40f});
            tabela.setHorizontalAlignment(Element.ALIGN_CENTER);
            tabela.setWidthPercentage(100f);

            PdfPCell cabecalho1 = new PdfPCell(new Paragraph("ID", f3));
            cabecalho1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho1.setBorder(0);

            PdfPCell cabecalho2 = new PdfPCell(new Paragraph("Data", f3));
            cabecalho2.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho2.setBorder(0);

            PdfPCell cabecalho3 = new PdfPCell(new Paragraph("Valor da Venda", f3));
            cabecalho3.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho3.setBorder(0);

            tabela.addCell(cabecalho1);
            tabela.addCell(cabecalho2);
            tabela.addCell(cabecalho3);

            for (Venda v : lista) {
                Paragraph p1 = new Paragraph(String.valueOf(v.getIdVenda()), f5);
                p1.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col1 = new PdfPCell(p1);
                col1.setBorder(PdfPCell.BOX);

                Paragraph p2 = new Paragraph(String.valueOf(v.getDataVenda()), f5);
                p2.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col2 = new PdfPCell(p2);
                col2.setBorder(PdfPCell.BOX);

                Paragraph p3 = new Paragraph(String.valueOf(v.getValorTotal()), f5);
                p3.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col3 = new PdfPCell(p3);
                col3.setBorder(PdfPCell.BOX);

                totalCompra += v.getValorTotal();
                tabela.addCell(col1);
                tabela.addCell(col2);
                tabela.addCell(col3);
            }
            doc.add(titulo1);
            doc.add(titulo2);
            Paragraph p5 = new Paragraph("Valor Total do Periodo: "+String.valueOf(totalCompra), f5);
            p5.setAlignment(Element.ALIGN_RIGHT);
            PdfPCell col5 = new PdfPCell(p5);
            col5.setBorder(PdfPCell.BOX);
            col5.setColspan(4);
            tabela.addCell(col5);
            doc.add(tabela);
            doc.close();
            JOptionPane.showMessageDialog(null, "Relatório salvo com sucesso");
            String caminho = "C:/SRS/Faturamento.pdf";
            Desktop.getDesktop().open(new File(caminho));
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (HeadlessException ex) {
            ex.printStackTrace();
        } catch (IOException exx) {
            JOptionPane.showMessageDialog(null, "Documento de Requisitos aberto. Feche para gerar um novo.");
        } catch (SQLException exxx) {
            exxx.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarPeriodo;
    private javax.swing.JButton btnRelatorio;
    private javax.swing.JFormattedTextField dataFinal;
    private javax.swing.JFormattedTextField dataInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbTotal;
    private javax.swing.JTable tbVendas;
    // End of variables declaration//GEN-END:variables
}
