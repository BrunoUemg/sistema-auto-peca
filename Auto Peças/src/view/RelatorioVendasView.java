/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import DAO.ProdutoDAO;
import DAO.VendaDAO;
import DAO.Session;
import com.lowagie.text.Document;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Font;
import com.lowagie.text.PageSize;
import com.lowagie.text.Paragraph;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;
import com.lowagie.text.pdf.PdfWriter;
import com.lowagie.text.Element;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.ItensVenda;
import model.Produto;
import model.Venda;

/**
 *
 * @author serpa
 */
public class RelatorioVendasView extends javax.swing.JInternalFrame {

    Produto produto;
    ProdutoDAO produtoDAO;
    Document doc;
    VendaDAO vendaDAO;
    Venda venda;
    ItensVenda itensVenda;
    SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
    String idVenda;

    /**
     * Creates new form ClienteView
     */
    public RelatorioVendasView() throws ParseException {
        vendaDAO = new VendaDAO();
        itensVenda = new ItensVenda();
        initComponents();
        this.setVisible(true);
        Session session = Session.getInstance();
        try {
            readVendasAll();
        } catch (SQLException ex) {
            Logger.getLogger(RelatorioVendasView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void readVendasAll() throws SQLException {
        DefaultTableModel modelF = (DefaultTableModel) tbVendas.getModel();
        modelF.setNumRows(0);
        for (Venda v : vendaDAO.readVendasAll()) {
            modelF.addRow(new Object[]{
                v.getIdVenda(),
                v.getCli().getNome(),
                v.getDataVenda(),
                v.getCli().getEmail(),
                v.getValorTotal(),});

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        dialog_itens = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbItens = new javax.swing.JTable();
        btnComprovante = new javax.swing.JButton();
        btnMaisVendidos = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        dataInicial = new javax.swing.JFormattedTextField();
        dataFinal = new javax.swing.JFormattedTextField();
        btnBuscarPeriodo = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbVendas = new javax.swing.JTable();

        dialog_itens.setMinimumSize(new java.awt.Dimension(720, 314));

        tbItens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Produto", "Quantidade ", "Preço", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tbItens);

        btnComprovante.setText("Gerar Comprovante");
        btnComprovante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComprovanteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout dialog_itensLayout = new javax.swing.GroupLayout(dialog_itens.getContentPane());
        dialog_itens.getContentPane().setLayout(dialog_itensLayout);
        dialog_itensLayout.setHorizontalGroup(
            dialog_itensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 690, Short.MAX_VALUE)
            .addGroup(dialog_itensLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnComprovante, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        dialog_itensLayout.setVerticalGroup(
            dialog_itensLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(dialog_itensLayout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(btnComprovante)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setClosable(true);
        setTitle("Relatórios Venda");
        setVisible(true);

        btnMaisVendidos.setText("Produtos mais Vendidos");
        btnMaisVendidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMaisVendidosActionPerformed(evt);
            }
        });

        jLabel1.setText("Periodo de Vendas");

        try {
            dataInicial.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        try {
            dataFinal.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        btnBuscarPeriodo.setText("Buscar Periodo de Vendas");
        btnBuscarPeriodo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarPeriodoActionPerformed(evt);
            }
        });

        tbVendas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Cliente", "Data", "E-mail", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbVendas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbVendasMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbVendas);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jLabel1)
                        .addGap(147, 147, 147)
                        .addComponent(btnMaisVendidos, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(btnBuscarPeriodo)))
                .addContainerGap(588, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(btnMaisVendidos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dataInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dataFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBuscarPeriodo)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 312, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnMaisVendidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMaisVendidosActionPerformed
        String nomeDiretorio = null;
        String nomePasta = "SRS";
        String separador = java.io.File.separator;
        try {
            nomeDiretorio = "C:" + separador + nomePasta;
            if (!new File(nomeDiretorio).exists()) {
                (new File(nomeDiretorio)).mkdir();
            }
            gerarRelatorioProdutosMaisVendidos();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnMaisVendidosActionPerformed

    private void tbVendasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbVendasMouseClicked
        dialog_itens.setVisible(true);
        dialog_itens.setLocationRelativeTo(null);
        if (tbVendas.getSelectedRow() != -1) {
            try {
                readVenda(tbVendas.getValueAt(tbVendas.getSelectedRow(), 0).toString());
                idVenda = tbVendas.getValueAt(tbVendas.getSelectedRow(), 0).toString();
            } catch (SQLException ex) {
                Logger.getLogger(FornecedorView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_tbVendasMouseClicked

    private void btnComprovanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComprovanteActionPerformed
        String nomeDiretorio = null;
        String nomePasta = "SRS";
        String separador = java.io.File.separator;
        try {
            nomeDiretorio = "C:" + separador + nomePasta;
            if (!new File(nomeDiretorio).exists()) {
                (new File(nomeDiretorio)).mkdir();
            }
            venda = vendaDAO.buscaVenda(String.valueOf(idVenda));
            venda.setItensVenda(vendaDAO.buscarItens(idVenda));
            gerarComprovanteVenda(venda);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnComprovanteActionPerformed

    private void btnBuscarPeriodoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarPeriodoActionPerformed
        try {
            SimpleDateFormat br = new SimpleDateFormat("dd/MM/yyyy");
            SimpleDateFormat dt = new SimpleDateFormat("yyyy-MM-dd");
            Date datei = br.parse(dataInicial.getText());
            Date datef = br.parse(dataFinal.getText());
            String dataI = dt.format(datei);
            String dataF = dt.format(datef);
            try {
                readVendasData(dataI, dataF);
            } catch (SQLException ex) {
                Logger.getLogger(RelatorioVendasView.class.getName()).log(Level.SEVERE, null, ex);
                try {
                    readVendasAll();
                } catch (SQLException ex1) {
                    Logger.getLogger(RelatorioVendasView.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        } catch (ParseException ex) {
            Logger.getLogger(RelatorioVendasView.class.getName()).log(Level.SEVERE, null, ex);
            try {
                readVendasAll();
            } catch (SQLException ex1) {
                Logger.getLogger(RelatorioVendasView.class.getName()).log(Level.SEVERE, null, ex1);
            }
        }
    }//GEN-LAST:event_btnBuscarPeriodoActionPerformed

    public void readVendasData(String i, String f) throws SQLException {
        DefaultTableModel modelF = (DefaultTableModel) tbVendas.getModel();
        modelF.setNumRows(0);
        for (Venda v : vendaDAO.readVendasData(i,f)) {
            modelF.addRow(new Object[]{
                v.getIdVenda(),
                v.getCli().getNome(),
                v.getDataVenda(),
                v.getCli().getEmail(),
                v.getValorTotal(),});

        }
    }

    public void gerarComprovanteVenda(Venda venda) {
        try {
            double totalCompra = 0;
            List<ItensVenda> lista = new ArrayList<>();
            lista = venda.getItensVenda();
            doc = new Document(PageSize.A4, 41.5f, 41.5f, 55.2f, 55.2f);
            PdfWriter.getInstance(doc, new FileOutputStream("C:/SRS/ComprovanteVenda" + ".pdf"));
            doc.open();

            Font f1 = new Font(Font.HELVETICA, 14, Font.BOLD);
            Font f2 = new Font(Font.HELVETICA, 12, Font.BOLD);
            Font f3 = new Font(Font.HELVETICA, 12, Font.NORMAL);
            Font f4 = new Font(Font.HELVETICA, 10, Font.BOLD);
            Font f5 = new Font(Font.HELVETICA, 10, Font.NORMAL);

            Paragraph titulo1 = new Paragraph("Comprovante de Venda", f2);
            titulo1.setAlignment(Element.ALIGN_CENTER);
            titulo1.setSpacingAfter(10);

            Paragraph titulo2 = new Paragraph("Cliente: " + venda.getCli().getNome(), f1);
            titulo2.setAlignment(Element.ALIGN_CENTER);
            titulo2.setSpacingAfter(10);

            PdfPTable tabela = new PdfPTable(new float[]{0.60f, 0.40f, 0.40f, 0.40f});
            tabela.setHorizontalAlignment(Element.ALIGN_CENTER);
            tabela.setWidthPercentage(100f);

            PdfPCell cabecalho1 = new PdfPCell(new Paragraph("Produto", f3));
            cabecalho1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho1.setBorder(0);

            PdfPCell cabecalho2 = new PdfPCell(new Paragraph("Quantidade", f3));
            cabecalho2.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho2.setBorder(0);

            PdfPCell cabecalho3 = new PdfPCell(new Paragraph("Preço Unitario", f3));
            cabecalho3.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho3.setBorder(0);

            PdfPCell cabecalho4 = new PdfPCell(new Paragraph("Total ", f3));
            cabecalho4.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho4.setBorder(0);

            tabela.addCell(cabecalho1);
            tabela.addCell(cabecalho2);
            tabela.addCell(cabecalho3);
            tabela.addCell(cabecalho4);

            for (ItensVenda itensVenda : lista) {
                Paragraph p1 = new Paragraph(itensVenda.getProduto().getNome(), f5);
                p1.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col1 = new PdfPCell(p1);
                col1.setBorder(PdfPCell.BOX);

                Paragraph p2 = new Paragraph(String.valueOf(itensVenda.getQuantidade()), f5);
                p2.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col2 = new PdfPCell(p2);
                col2.setBorder(PdfPCell.BOX);

                Paragraph p3 = new Paragraph(String.valueOf(itensVenda.getPrecoUnitario()), f5);
                p3.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col3 = new PdfPCell(p3);
                col3.setBorder(PdfPCell.BOX);

                Paragraph p4 = new Paragraph(String.valueOf(itensVenda.getPrecoUnitario() * itensVenda.getQuantidade()), f5);
                p4.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col4 = new PdfPCell(p4);
                col4.setBorder(PdfPCell.BOX);

                totalCompra += itensVenda.getPrecoUnitario() * itensVenda.getQuantidade();
                tabela.addCell(col1);
                tabela.addCell(col2);
                tabela.addCell(col3);
                tabela.addCell(col4);
            }
            doc.add(titulo1);
            doc.add(titulo2);

            Paragraph p5 = new Paragraph(String.valueOf(totalCompra), f5);
            p5.setAlignment(Element.ALIGN_RIGHT);
            PdfPCell col5 = new PdfPCell(p5);
            col5.setBorder(PdfPCell.BOX);
            col5.setColspan(4);
            tabela.addCell(col5);

            doc.add(tabela);
            doc.close();
            JOptionPane.showMessageDialog(null, "Relatório salvo com sucesso");
            String caminho = "C:/SRS/ComprovanteVenda.pdf";
            Desktop.getDesktop().open(new File(caminho));
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (HeadlessException ex) {
            ex.printStackTrace();
        } catch (IOException exx) {
            JOptionPane.showMessageDialog(null, "Documento de Requisitos aberto. Feche para gerar um novo.");
        }
    }

    public void readVenda(String codigo) throws SQLException {
        DefaultTableModel modelF = (DefaultTableModel) tbItens.getModel();
        modelF.setNumRows(0);
        for (ItensVenda v : vendaDAO.buscarItens(codigo)) {
            modelF.addRow(new Object[]{
                v.getProduto().getNome(),
                v.getQuantidade(),
                v.getPrecoUnitario(),
                v.getPrecoUnitario() * v.getQuantidade()
            });

        }
    }

    public void gerarRelatorioProdutosMaisVendidos() {
        try {
            List<Produto> lista = new ArrayList<>();
            lista = produtoDAO.readProdutoTop();
            doc = new Document(PageSize.A4, 41.5f, 41.5f, 55.2f, 55.2f);
            PdfWriter.getInstance(doc, new FileOutputStream("C:/SRS/ProdutosTop" + ".pdf"));
            doc.open();

            Font f1 = new Font(Font.HELVETICA, 14, Font.BOLD);
            Font f2 = new Font(Font.HELVETICA, 12, Font.BOLD);
            Font f3 = new Font(Font.HELVETICA, 12, Font.NORMAL);
            Font f4 = new Font(Font.HELVETICA, 10, Font.BOLD);
            Font f5 = new Font(Font.HELVETICA, 10, Font.NORMAL);

            Paragraph titulo1 = new Paragraph("Produtos Auto Peças", f2);
            titulo1.setAlignment(Element.ALIGN_CENTER);
            titulo1.setSpacingAfter(10);

            Paragraph titulo2 = new Paragraph("Relátorio de Produtos Mais Vendidos", f1);
            titulo2.setAlignment(Element.ALIGN_CENTER);
            titulo2.setSpacingAfter(10);
            PdfPTable tabela = new PdfPTable(new float[]{0.60f, 0.40f, 0.40f, 0.40f});
            tabela.setHorizontalAlignment(Element.ALIGN_CENTER);
            tabela.setWidthPercentage(100f);

            PdfPCell cabecalho1 = new PdfPCell(new Paragraph("Produto", f3));
            cabecalho1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho1.setBorder(0);

            PdfPCell cabecalho2 = new PdfPCell(new Paragraph("Quantidade", f3));
            cabecalho2.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho2.setBorder(0);

            PdfPCell cabecalho3 = new PdfPCell(new Paragraph("Valor de Saida", f3));
            cabecalho3.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho3.setBorder(0);

            PdfPCell cabecalho4 = new PdfPCell(new Paragraph("Total Vendido", f3));
            cabecalho4.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho4.setBorder(0);

            tabela.addCell(cabecalho1);
            tabela.addCell(cabecalho2);
            tabela.addCell(cabecalho3);
            tabela.addCell(cabecalho4);

            for (Produto produto : lista) {
                Paragraph p1 = new Paragraph(produto.getNome(), f5);
                p1.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col1 = new PdfPCell(p1);
                col1.setBorder(PdfPCell.BOX);

                Paragraph p2 = new Paragraph(String.valueOf(produto.getQuantidadeEstoque()), f5);
                p2.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col2 = new PdfPCell(p2);
                col2.setBorder(PdfPCell.BOX);

                Paragraph p3 = new Paragraph(String.valueOf(produto.getValorSaida()), f5);
                p3.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col3 = new PdfPCell(p3);
                col3.setBorder(PdfPCell.BOX);

                Paragraph p4 = new Paragraph(produto.getNomeCategoria(), f5);
                p4.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col4 = new PdfPCell(p4);
                col4.setBorder(PdfPCell.BOX);

                tabela.addCell(col1);
                tabela.addCell(col2);
                tabela.addCell(col3);
                tabela.addCell(col4);
            }
            doc.add(titulo1);
            doc.add(titulo2);
            doc.add(tabela);
            doc.close();
            JOptionPane.showMessageDialog(null, "Relatório salvo com sucesso");
            String caminho = "C:/SRS/ProdutosTop.pdf";
            Desktop.getDesktop().open(new File(caminho));
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (HeadlessException ex) {
            ex.printStackTrace();
        } catch (IOException exx) {
            JOptionPane.showMessageDialog(null, "Documento de Requisitos aberto. Feche para gerar um novo.");
        } catch (SQLException exxx) {
            exxx.printStackTrace();
        }
    }

    public void gerarRelatorioProdutosBaixa() {
        try {
            List<Produto> lista = new ArrayList<>();
            lista = produtoDAO.readProdutoEstoque();
            doc = new Document(PageSize.A4, 41.5f, 41.5f, 55.2f, 55.2f);
            PdfWriter.getInstance(doc, new FileOutputStream("C:/SRS/ProdutosEmBaixa" + ".pdf"));
            doc.open();

            Font f1 = new Font(Font.HELVETICA, 14, Font.BOLD);
            Font f2 = new Font(Font.HELVETICA, 12, Font.BOLD);
            Font f3 = new Font(Font.HELVETICA, 12, Font.NORMAL);
            Font f4 = new Font(Font.HELVETICA, 10, Font.BOLD);
            Font f5 = new Font(Font.HELVETICA, 10, Font.NORMAL);

            Paragraph titulo1 = new Paragraph("Produtos Auto Peças", f2);
            titulo1.setAlignment(Element.ALIGN_CENTER);
            titulo1.setSpacingAfter(10);

            Paragraph titulo2 = new Paragraph("Relátorio de Produtos", f1);
            titulo2.setAlignment(Element.ALIGN_CENTER);
            titulo2.setSpacingAfter(10);
            PdfPTable tabela = new PdfPTable(new float[]{0.60f, 0.40f, 0.40f, 0.40f, 0.40f});
            tabela.setHorizontalAlignment(Element.ALIGN_CENTER);
            tabela.setWidthPercentage(100f);

            PdfPCell cabecalho1 = new PdfPCell(new Paragraph("Produto", f3));
            cabecalho1.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho1.setBorder(0);

            PdfPCell cabecalho2 = new PdfPCell(new Paragraph("Quantidade Minima", f3));
            cabecalho2.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho2.setBorder(0);

            PdfPCell cabecalho3 = new PdfPCell(new Paragraph("Quantidade", f3));
            cabecalho3.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho3.setBorder(0);

            PdfPCell cabecalho4 = new PdfPCell(new Paragraph("Valor de Compra ", f3));
            cabecalho4.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho4.setBorder(0);

            PdfPCell cabecalho5 = new PdfPCell(new Paragraph("Valor de Saida ", f3));
            cabecalho5.setHorizontalAlignment(Element.ALIGN_CENTER);
            cabecalho5.setBorder(0);

            tabela.addCell(cabecalho1);
            tabela.addCell(cabecalho2);
            tabela.addCell(cabecalho3);
            tabela.addCell(cabecalho4);
            tabela.addCell(cabecalho5);

            for (Produto produto : lista) {
                Paragraph p1 = new Paragraph(produto.getNome(), f5);
                p1.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col1 = new PdfPCell(p1);
                col1.setBorder(PdfPCell.BOX);

                Paragraph p2 = new Paragraph(String.valueOf(produto.getQuantidadeMin()), f5);
                p2.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col2 = new PdfPCell(p2);
                col2.setBorder(PdfPCell.BOX);

                Paragraph p3 = new Paragraph(String.valueOf(produto.getQuantidadeEstoque()), f5);
                p3.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col3 = new PdfPCell(p3);
                col3.setBorder(PdfPCell.BOX);

                Paragraph p4 = new Paragraph(String.valueOf(produto.getValorCompra()), f5);
                p4.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col4 = new PdfPCell(p4);
                col4.setBorder(PdfPCell.BOX);

                Paragraph p5 = new Paragraph(String.valueOf(produto.getValorSaida()), f5);
                p5.setAlignment(Element.ALIGN_JUSTIFIED);
                PdfPCell col5 = new PdfPCell(p5);
                col5.setBorder(PdfPCell.BOX);

                tabela.addCell(col1);
                tabela.addCell(col2);
                tabela.addCell(col3);
                tabela.addCell(col4);
                tabela.addCell(col5);
            }
            doc.add(titulo1);
            doc.add(titulo2);
            doc.add(tabela);
            doc.close();
            JOptionPane.showMessageDialog(null, "Relatório salvo com sucesso");
            String caminho = "C:/SRS/ProdutosEmBaixa.pdf";
            Desktop.getDesktop().open(new File(caminho));
        } catch (DocumentException e) {
            e.printStackTrace();
        } catch (HeadlessException ex) {
            ex.printStackTrace();
        } catch (IOException exx) {
            JOptionPane.showMessageDialog(null, "Documento de Requisitos aberto. Feche para gerar um novo.");
        } catch (SQLException exxx) {
            exxx.printStackTrace();
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBuscarPeriodo;
    private javax.swing.JButton btnComprovante;
    private javax.swing.JButton btnMaisVendidos;
    private javax.swing.JFormattedTextField dataFinal;
    private javax.swing.JFormattedTextField dataInicial;
    private javax.swing.JDialog dialog_itens;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbItens;
    private javax.swing.JTable tbVendas;
    // End of variables declaration//GEN-END:variables
}
